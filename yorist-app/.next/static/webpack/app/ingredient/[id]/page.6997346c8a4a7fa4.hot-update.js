"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/ingredient/[id]/page",{

/***/ "(app-pages-browser)/./src/lib/ingredientSync.ts":
/*!***********************************!*\
  !*** ./src/lib/ingredientSync.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createIngredient: function() { return /* binding */ createIngredient; },\n/* harmony export */   deleteIngredientIfUnused: function() { return /* binding */ deleteIngredientIfUnused; },\n/* harmony export */   findIngredientByName: function() { return /* binding */ findIngredientByName; },\n/* harmony export */   getIngredientById: function() { return /* binding */ getIngredientById; },\n/* harmony export */   getPopularIngredients: function() { return /* binding */ getPopularIngredients; },\n/* harmony export */   mergeIngredients: function() { return /* binding */ mergeIngredients; },\n/* harmony export */   searchIngredients: function() { return /* binding */ searchIngredients; },\n/* harmony export */   sortIngredients: function() { return /* binding */ sortIngredients; },\n/* harmony export */   toggleIngredientFavorite: function() { return /* binding */ toggleIngredientFavorite; },\n/* harmony export */   triggerIngredientSync: function() { return /* binding */ triggerIngredientSync; },\n/* harmony export */   updateIngredient: function() { return /* binding */ updateIngredient; },\n/* harmony export */   useIngredientSync: function() { return /* binding */ useIngredientSync; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(\"https://rshosgiwnqcvwfnkqdwc.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJzaG9zZ2l3bnFjdndmbmtxZHdjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE2MzMxNjEsImV4cCI6MjA2NzIwOTE2MX0.9yrX80F0-3w0H8u3Qx449oYRpD4vA1wEjEYP7mdylGg\");\nlet version = 0;\nconst listeners = [];\nfunction useIngredientSync() {\n    const [, setTick] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    function onSync() {\n        setTick((t)=>t + 1);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        listeners.push(onSync);\n        return ()=>{\n            const idx = listeners.indexOf(onSync);\n            if (idx > -1) listeners.splice(idx, 1);\n        };\n    }, []);\n    return version;\n}\nfunction triggerIngredientSync() {\n    version++;\n    listeners.forEach((fn)=>fn());\n}\n// 재료 검색 함수\nasync function searchIngredients(query) {\n    let limit = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n    try {\n        const { data, error } = await supabase.from(\"ingredients_master\").select(\"id, name, unit, shop_url, is_favorite, created_at\").ilike(\"name\", \"%\".concat(query, \"%\")).order(\"is_favorite\", {\n            ascending: false\n        }) // 즐겨찾기 재료를 먼저 표시\n        .order(\"name\", {\n            ascending: true\n        }).limit(limit);\n        if (error) {\n            console.error(\"재료 검색 실패:\", error);\n            return [];\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"재료 검색 중 오류:\", error);\n        return [];\n    }\n}\n// 재료 상세 정보 조회 함수\nasync function getIngredientById(id) {\n    try {\n        const { data, error } = await supabase.from(\"ingredients_master\").select(\"id, name, unit, shop_url, is_favorite, created_at\").eq(\"id\", id).single();\n        if (error) {\n            console.error(\"재료 조회 실패:\", error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"재료 조회 중 오류:\", error);\n        return null;\n    }\n}\n// 재료 업데이트 함수\nasync function updateIngredient(id, updates) {\n    try {\n        const { error } = await supabase.from(\"ingredients_master\").update(updates).eq(\"id\", id);\n        if (error) {\n            console.error(\"재료 업데이트 실패:\", error);\n            return false;\n        }\n        triggerIngredientSync();\n        return true;\n    } catch (error) {\n        console.error(\"재료 업데이트 중 오류:\", error);\n        return false;\n    }\n}\n// 재료 삭제 함수 (다른 레시피에서 사용되지 않는 경우에만)\nasync function deleteIngredientIfUnused(id) {\n    try {\n        // 해당 재료를 사용하는 다른 레시피가 있는지 확인\n        const { data: recipes, error: recipesError } = await supabase.from(\"recipes\").select(\"ingredients\").contains(\"ingredients\", [\n            {\n                ingredient_id: id\n            }\n        ]);\n        if (recipesError) {\n            console.error(\"레시피 조회 실패:\", recipesError);\n            return false;\n        }\n        // 다른 레시피에서 사용되지 않는 경우에만 삭제\n        if (!recipes || recipes.length === 0) {\n            const { error } = await supabase.from(\"ingredients_master\").delete().eq(\"id\", id);\n            if (error) {\n                console.error(\"재료 삭제 실패:\", error);\n                return false;\n            }\n            triggerIngredientSync();\n            return true;\n        }\n        return false; // 다른 레시피에서 사용 중\n    } catch (error) {\n        console.error(\"재료 삭제 중 오류:\", error);\n        return false;\n    }\n}\n// 재료 즐겨찾기 토글 함수\nasync function toggleIngredientFavorite(id) {\n    try {\n        // 현재 즐겨찾기 상태 조회\n        const current = await getIngredientById(id);\n        if (!current) return false;\n        const newFavoriteState = !current.is_favorite;\n        const { error } = await supabase.from(\"ingredients_master\").update({\n            is_favorite: newFavoriteState\n        }).eq(\"id\", id);\n        if (error) {\n            console.error(\"재료 즐겨찾기 토글 실패:\", error);\n            return false;\n        }\n        triggerIngredientSync();\n        return true;\n    } catch (error) {\n        console.error(\"재료 즐겨찾기 토글 중 오류:\", error);\n        return false;\n    }\n}\n// 재료명으로 재료 찾기 (정확한 매칭)\nasync function findIngredientByName(name) {\n    try {\n        const { data, error } = await supabase.from(\"ingredients_master\").select(\"id, name, unit, shop_url, is_favorite, created_at\").ilike(\"name\", name.trim()).single();\n        if (error) {\n            // 재료가 없는 경우 null 반환 (에러가 아님)\n            if (error.code === \"PGRST116\") {\n                return null;\n            }\n            console.error(\"재료 검색 실패:\", error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error(\"재료 검색 중 오류:\", error);\n        return null;\n    }\n}\n// 새 재료 생성 함수\nasync function createIngredient(ingredient) {\n    try {\n        const { data, error } = await supabase.from(\"ingredients_master\").insert({\n            name: ingredient.name.trim(),\n            unit: ingredient.unit || \"개\",\n            shop_url: ingredient.shop_url || null,\n            is_favorite: ingredient.is_favorite || false\n        }).select(\"id\").single();\n        if (error) {\n            console.error(\"재료 생성 실패:\", error);\n            return null;\n        }\n        triggerIngredientSync();\n        return data.id;\n    } catch (error) {\n        console.error(\"재료 생성 중 오류:\", error);\n        return null;\n    }\n}\n// 자주 사용되는 재료 추천 함수\nasync function getPopularIngredients() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 10;\n    try {\n        // 즐겨찾기된 재료들을 우선적으로 가져오기\n        const { data: favoriteIngredients, error: favoriteError } = await supabase.from(\"ingredients_master\").select(\"id, name, unit, shop_url, is_favorite, created_at\").eq(\"is_favorite\", true).order(\"name\", {\n            ascending: true\n        }).limit(Math.ceil(limit / 2));\n        if (favoriteError) {\n            console.error(\"즐겨찾기 재료 조회 실패:\", favoriteError);\n        }\n        // 나머지는 최근 생성된 재료들로 채우기\n        const remainingLimit = limit - ((favoriteIngredients === null || favoriteIngredients === void 0 ? void 0 : favoriteIngredients.length) || 0);\n        let recentIngredients = [];\n        if (remainingLimit > 0) {\n            const { data: recent, error: recentError } = await supabase.from(\"ingredients_master\").select(\"id, name, unit, shop_url, is_favorite, created_at\").order(\"created_at\", {\n                ascending: false\n            }).limit(remainingLimit);\n            if (recentError) {\n                console.error(\"최근 재료 조회 실패:\", recentError);\n            } else {\n                recentIngredients = recent || [];\n            }\n        }\n        // 즐겨찾기 재료와 최근 재료를 합치고 중복 제거\n        const allIngredients = [\n            ...favoriteIngredients || [],\n            ...recentIngredients\n        ];\n        const uniqueIngredients = allIngredients.reduce((acc, current)=>{\n            const exists = acc.find((item)=>item.id === current.id);\n            if (!exists) {\n                acc.push(current);\n            }\n            return acc;\n        }, []);\n        return uniqueIngredients.slice(0, limit);\n    } catch (error) {\n        console.error(\"인기 재료 조회 중 오류:\", error);\n        return [];\n    }\n}\n// 재료 검색 결과 정렬 함수\nfunction sortIngredients(ingredients) {\n    let sortBy = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"favorite\";\n    const sorted = [\n        ...ingredients\n    ];\n    switch(sortBy){\n        case \"name\":\n            return sorted.sort((a, b)=>a.name.localeCompare(b.name));\n        case \"favorite\":\n            return sorted.sort((a, b)=>{\n                if (a.is_favorite && !b.is_favorite) return -1;\n                if (!a.is_favorite && b.is_favorite) return 1;\n                return a.name.localeCompare(b.name);\n            });\n        case \"recent\":\n            return sorted.sort((a, b)=>{\n                const dateA = new Date(a.created_at || 0);\n                const dateB = new Date(b.created_at || 0);\n                return dateB.getTime() - dateA.getTime();\n            });\n        default:\n            return sorted;\n    }\n}\n// 두 재료를 통합(merge)하는 함수: oldId의 모든 레시피를 newId로 교체, oldId가 더 이상 사용되지 않으면 삭제\nasync function mergeIngredients(oldId, newId) {\n    try {\n        // 1. 모든 레시피에서 oldId를 newId로 교체\n        const { data: recipes, error: recipeError } = await supabase.from(\"recipes\").select(\"id, ingredients\").contains(\"ingredients\", [\n            {\n                ingredient_id: oldId\n            }\n        ]);\n        if (recipeError) {\n            console.error(\"레시피 조회 실패:\", recipeError);\n            return false;\n        }\n        for (const recipe of recipes || []){\n            const updatedIngredients = (recipe.ingredients || []).map((ing)=>ing.ingredient_id === oldId ? {\n                    ...ing,\n                    ingredient_id: newId\n                } : ing);\n            await supabase.from(\"recipes\").update({\n                ingredients: updatedIngredients\n            }).eq(\"id\", recipe.id);\n        }\n        // 2. oldId가 더 이상 사용되지 않으면 ingredients_master에서 삭제\n        const { data: stillUsed } = await supabase.from(\"recipes\").select(\"id\").contains(\"ingredients\", [\n            {\n                ingredient_id: oldId\n            }\n        ]);\n        if (!stillUsed || stillUsed.length === 0) {\n            await supabase.from(\"ingredients_master\").delete().eq(\"id\", oldId);\n        }\n        triggerIngredientSync();\n        return true;\n    } catch (error) {\n        console.error(\"재료 통합(merge) 중 오류:\", error);\n        return false;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/ingredientSync.ts\n"));

/***/ })

});