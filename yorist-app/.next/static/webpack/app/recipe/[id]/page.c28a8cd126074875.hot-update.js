"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/recipe/[id]/page",{

/***/ "(app-pages-browser)/./src/lib/youtubeUtils.ts":
/*!*********************************!*\
  !*** ./src/lib/youtubeUtils.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getYouTubeEmbedUrl: function() { return /* binding */ getYouTubeEmbedUrl; },\n/* harmony export */   getYouTubeThumbnail: function() { return /* binding */ getYouTubeThumbnail; },\n/* harmony export */   getYouTubeVideoId: function() { return /* binding */ getYouTubeVideoId; },\n/* harmony export */   getYoutubeThumbnailUrl: function() { return /* binding */ getYoutubeThumbnailUrl; },\n/* harmony export */   isValidYouTubeUrl: function() { return /* binding */ isValidYouTubeUrl; },\n/* harmony export */   normalizeYouTubeUrl: function() { return /* binding */ normalizeYouTubeUrl; }\n/* harmony export */ });\n// 유튜브 URL 검증 및 변환 함수들\n/**\n * 유튜브 URL을 임베드 URL로 변환\n * @param url - 원본 유튜브 URL\n * @returns 임베드 URL 또는 빈 문자열\n */ const getYouTubeEmbedUrl = (url)=>{\n    if (!url) return \"\";\n    // YouTube URL 패턴들\n    const patterns = [\n        /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)/,\n        /youtube\\.com\\/watch\\?.*v=([^&\\n?#]+)/\n    ];\n    for (const pattern of patterns){\n        const match = url.match(pattern);\n        if (match) {\n            return \"https://www.youtube.com/embed/\".concat(match[1]);\n        }\n    }\n    return \"\"; // 변환할 수 없는 경우 빈 문자열 반환\n};\n/**\n * 유튜브 URL이 유효한지 검증\n * @param url - 검증할 URL\n * @returns 유효성 여부\n */ const isValidYouTubeUrl = (url)=>{\n    if (!url) return false;\n    const youtubePatterns = [\n        /^https?:\\/\\/(www\\.)?youtube\\.com\\/watch\\?v=[^&\\n?#]+/,\n        /^https?:\\/\\/youtu\\.be\\/[^&\\n?#]+/,\n        /^https?:\\/\\/(www\\.)?youtube\\.com\\/embed\\/[^&\\n?#]+/\n    ];\n    return youtubePatterns.some((pattern)=>pattern.test(url));\n};\n/**\n * 유튜브 비디오 ID 추출\n * @param url - 유튜브 URL\n * @returns 비디오 ID 또는 null\n */ const getYouTubeVideoId = (url)=>{\n    if (!url) return null;\n    const patterns = [\n        /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([^&\\n?#]+)/,\n        /youtube\\.com\\/watch\\?.*v=([^&\\n?#]+)/\n    ];\n    for (const pattern of patterns){\n        const match = url.match(pattern);\n        if (match) {\n            return match[1];\n        }\n    }\n    return null;\n};\n/**\n * 유튜브 썸네일 URL 생성\n * @param videoId - 유튜브 비디오 ID\n * @param quality - 썸네일 품질 (default, hq, mq, sd, maxres)\n * @returns 썸네일 URL\n */ const getYouTubeThumbnail = function(videoId) {\n    let quality = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"hq\";\n    return \"https://img.youtube.com/vi/\".concat(videoId, \"/\").concat(quality, \"default.jpg\");\n};\n/**\n * 유튜브 URL 정규화 (공백 제거, URL 인코딩 등)\n * @param url - 원본 URL\n * @returns 정규화된 URL\n */ const normalizeYouTubeUrl = (url)=>{\n    if (!url) return \"\";\n    // 공백 제거\n    let normalized = url.trim();\n    // URL 인코딩\n    try {\n        normalized = encodeURI(normalized);\n    } catch (error) {\n        console.warn(\"URL 인코딩 실패:\", error);\n    }\n    return normalized;\n};\n// 유튜브 videoUrl에서 썸네일 URL을 생성하는 함수\nfunction getYoutubeThumbnailUrl(videoUrl) {\n    // 유튜브 ID 추출 (youtu.be/..., youtube.com/watch?v=... 등 지원)\n    let id = \"\";\n    try {\n        const url = new URL(videoUrl);\n        if (url.hostname === \"youtu.be\") {\n            id = url.pathname.replace(\"/\", \"\");\n        } else if (url.hostname.includes(\"youtube.com\")) {\n            id = url.searchParams.get(\"v\") || \"\";\n        }\n    } catch (e) {\n        // fallback: 정규식\n        const match = videoUrl.match(/(?:youtu\\.be\\/|v=)([\\w-]{11})/);\n        if (match) id = match[1];\n    }\n    if (!id) return \"\";\n    return \"https://img.youtube.com/vi/\".concat(id, \"/hqdefault.jpg\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIveW91dHViZVV0aWxzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHNCQUFzQjtBQUV0Qjs7OztDQUlDLEdBQ00sTUFBTUEscUJBQXFCLENBQUNDO0lBQ2pDLElBQUksQ0FBQ0EsS0FBSyxPQUFPO0lBRWpCLGtCQUFrQjtJQUNsQixNQUFNQyxXQUFXO1FBQ2Y7UUFDQTtLQUNEO0lBRUQsS0FBSyxNQUFNQyxXQUFXRCxTQUFVO1FBQzlCLE1BQU1FLFFBQVFILElBQUlHLEtBQUssQ0FBQ0Q7UUFDeEIsSUFBSUMsT0FBTztZQUNULE9BQU8saUNBQTBDLE9BQVRBLEtBQUssQ0FBQyxFQUFFO1FBQ2xEO0lBQ0Y7SUFFQSxPQUFPLElBQUksdUJBQXVCO0FBQ3BDLEVBQUU7QUFFRjs7OztDQUlDLEdBQ00sTUFBTUMsb0JBQW9CLENBQUNKO0lBQ2hDLElBQUksQ0FBQ0EsS0FBSyxPQUFPO0lBRWpCLE1BQU1LLGtCQUFrQjtRQUN0QjtRQUNBO1FBQ0E7S0FDRDtJQUVELE9BQU9BLGdCQUFnQkMsSUFBSSxDQUFDSixDQUFBQSxVQUFXQSxRQUFRSyxJQUFJLENBQUNQO0FBQ3RELEVBQUU7QUFFRjs7OztDQUlDLEdBQ00sTUFBTVEsb0JBQW9CLENBQUNSO0lBQ2hDLElBQUksQ0FBQ0EsS0FBSyxPQUFPO0lBRWpCLE1BQU1DLFdBQVc7UUFDZjtRQUNBO0tBQ0Q7SUFFRCxLQUFLLE1BQU1DLFdBQVdELFNBQVU7UUFDOUIsTUFBTUUsUUFBUUgsSUFBSUcsS0FBSyxDQUFDRDtRQUN4QixJQUFJQyxPQUFPO1lBQ1QsT0FBT0EsS0FBSyxDQUFDLEVBQUU7UUFDakI7SUFDRjtJQUVBLE9BQU87QUFDVCxFQUFFO0FBRUY7Ozs7O0NBS0MsR0FDTSxNQUFNTSxzQkFBc0IsU0FBQ0M7UUFBaUJDLDJFQUFxRDtJQUN4RyxPQUFPLDhCQUF5Q0EsT0FBWEQsU0FBUSxLQUFXLE9BQVJDLFNBQVE7QUFDMUQsRUFBRTtBQUVGOzs7O0NBSUMsR0FDTSxNQUFNQyxzQkFBc0IsQ0FBQ1o7SUFDbEMsSUFBSSxDQUFDQSxLQUFLLE9BQU87SUFFakIsUUFBUTtJQUNSLElBQUlhLGFBQWFiLElBQUljLElBQUk7SUFFekIsVUFBVTtJQUNWLElBQUk7UUFDRkQsYUFBYUUsVUFBVUY7SUFDekIsRUFBRSxPQUFPRyxPQUFPO1FBQ2RDLFFBQVFDLElBQUksQ0FBQyxlQUFlRjtJQUM5QjtJQUVBLE9BQU9IO0FBQ1QsRUFBRTtBQUVGLGtDQUFrQztBQUMzQixTQUFTTSx1QkFBdUJDLFFBQWdCO0lBQ3JELHlEQUF5RDtJQUN6RCxJQUFJQyxLQUFLO0lBQ1QsSUFBSTtRQUNGLE1BQU1yQixNQUFNLElBQUlzQixJQUFJRjtRQUNwQixJQUFJcEIsSUFBSXVCLFFBQVEsS0FBSyxZQUFZO1lBQy9CRixLQUFLckIsSUFBSXdCLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDLEtBQUs7UUFDakMsT0FBTyxJQUFJekIsSUFBSXVCLFFBQVEsQ0FBQ0csUUFBUSxDQUFDLGdCQUFnQjtZQUMvQ0wsS0FBS3JCLElBQUkyQixZQUFZLENBQUNDLEdBQUcsQ0FBQyxRQUFRO1FBQ3BDO0lBQ0YsRUFBRSxVQUFNO1FBQ04sZ0JBQWdCO1FBQ2hCLE1BQU16QixRQUFRaUIsU0FBU2pCLEtBQUssQ0FBQztRQUM3QixJQUFJQSxPQUFPa0IsS0FBS2xCLEtBQUssQ0FBQyxFQUFFO0lBQzFCO0lBQ0EsSUFBSSxDQUFDa0IsSUFBSSxPQUFPO0lBQ2hCLE9BQU8sOEJBQWlDLE9BQUhBLElBQUc7QUFDMUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2xpYi95b3V0dWJlVXRpbHMudHM/ZjI5OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyDsnKDtipzruIwgVVJMIOqygOymnSDrsI8g67OA7ZmYIO2VqOyImOuTpFxuXG4vKipcbiAqIOycoO2KnOu4jCBVUkzsnYQg7J6E67Kg65OcIFVSTOuhnCDrs4DtmZhcbiAqIEBwYXJhbSB1cmwgLSDsm5Drs7gg7Jyg7Yqc67iMIFVSTFxuICogQHJldHVybnMg7J6E67Kg65OcIFVSTCDrmJDripQg67mIIOusuOyekOyXtFxuICovXG5leHBvcnQgY29uc3QgZ2V0WW91VHViZUVtYmVkVXJsID0gKHVybDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgaWYgKCF1cmwpIHJldHVybiAnJztcbiAgXG4gIC8vIFlvdVR1YmUgVVJMIO2MqO2EtOuTpFxuICBjb25zdCBwYXR0ZXJucyA9IFtcbiAgICAvKD86eW91dHViZVxcLmNvbVxcL3dhdGNoXFw/dj18eW91dHVcXC5iZVxcL3x5b3V0dWJlXFwuY29tXFwvZW1iZWRcXC8pKFteJlxcbj8jXSspLyxcbiAgICAveW91dHViZVxcLmNvbVxcL3dhdGNoXFw/Lip2PShbXiZcXG4/I10rKS9cbiAgXTtcbiAgXG4gIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xuICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHBhdHRlcm4pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmV0dXJuIGBodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8ke21hdGNoWzFdfWA7XG4gICAgfVxuICB9XG4gIFxuICByZXR1cm4gJyc7IC8vIOuzgO2ZmO2VoCDsiJgg7JeG64qUIOqyveyasCDruYgg66y47J6Q7Je0IOuwmO2ZmFxufTtcblxuLyoqXG4gKiDsnKDtipzruIwgVVJM7J20IOycoO2aqO2VnOyngCDqsoDspp1cbiAqIEBwYXJhbSB1cmwgLSDqsoDspp3tlaAgVVJMXG4gKiBAcmV0dXJucyDsnKDtmqjshLEg7Jes67aAXG4gKi9cbmV4cG9ydCBjb25zdCBpc1ZhbGlkWW91VHViZVVybCA9ICh1cmw6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICBpZiAoIXVybCkgcmV0dXJuIGZhbHNlO1xuICBcbiAgY29uc3QgeW91dHViZVBhdHRlcm5zID0gW1xuICAgIC9eaHR0cHM/OlxcL1xcLyh3d3dcXC4pP3lvdXR1YmVcXC5jb21cXC93YXRjaFxcP3Y9W14mXFxuPyNdKy8sXG4gICAgL15odHRwcz86XFwvXFwveW91dHVcXC5iZVxcL1teJlxcbj8jXSsvLFxuICAgIC9eaHR0cHM/OlxcL1xcLyh3d3dcXC4pP3lvdXR1YmVcXC5jb21cXC9lbWJlZFxcL1teJlxcbj8jXSsvXG4gIF07XG4gIFxuICByZXR1cm4geW91dHViZVBhdHRlcm5zLnNvbWUocGF0dGVybiA9PiBwYXR0ZXJuLnRlc3QodXJsKSk7XG59O1xuXG4vKipcbiAqIOycoO2KnOu4jCDruYTrlJTsmKQgSUQg7LaU7LacXG4gKiBAcGFyYW0gdXJsIC0g7Jyg7Yqc67iMIFVSTFxuICogQHJldHVybnMg67mE65SU7JikIElEIOuYkOuKlCBudWxsXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRZb3VUdWJlVmlkZW9JZCA9ICh1cmw6IHN0cmluZyk6IHN0cmluZyB8IG51bGwgPT4ge1xuICBpZiAoIXVybCkgcmV0dXJuIG51bGw7XG4gIFxuICBjb25zdCBwYXR0ZXJucyA9IFtcbiAgICAvKD86eW91dHViZVxcLmNvbVxcL3dhdGNoXFw/dj18eW91dHVcXC5iZVxcL3x5b3V0dWJlXFwuY29tXFwvZW1iZWRcXC8pKFteJlxcbj8jXSspLyxcbiAgICAveW91dHViZVxcLmNvbVxcL3dhdGNoXFw/Lip2PShbXiZcXG4/I10rKS9cbiAgXTtcbiAgXG4gIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xuICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHBhdHRlcm4pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgIH1cbiAgfVxuICBcbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIOycoO2KnOu4jCDsjbjrhKTsnbwgVVJMIOyDneyEsVxuICogQHBhcmFtIHZpZGVvSWQgLSDsnKDtipzruIwg67mE65SU7JikIElEXG4gKiBAcGFyYW0gcXVhbGl0eSAtIOyNuOuEpOydvCDtkojsp4ggKGRlZmF1bHQsIGhxLCBtcSwgc2QsIG1heHJlcylcbiAqIEByZXR1cm5zIOyNuOuEpOydvCBVUkxcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFlvdVR1YmVUaHVtYm5haWwgPSAodmlkZW9JZDogc3RyaW5nLCBxdWFsaXR5OiAnZGVmYXVsdCcgfCAnaHEnIHwgJ21xJyB8ICdzZCcgfCAnbWF4cmVzJyA9ICdocScpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gYGh0dHBzOi8vaW1nLnlvdXR1YmUuY29tL3ZpLyR7dmlkZW9JZH0vJHtxdWFsaXR5fWRlZmF1bHQuanBnYDtcbn07XG5cbi8qKlxuICog7Jyg7Yqc67iMIFVSTCDsoJXqt5ztmZQgKOqzteuwsSDsoJzqsbAsIFVSTCDsnbjsvZTrlKkg65OxKVxuICogQHBhcmFtIHVybCAtIOybkOuzuCBVUkxcbiAqIEByZXR1cm5zIOygleq3nO2ZlOuQnCBVUkxcbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVlvdVR1YmVVcmwgPSAodXJsOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBpZiAoIXVybCkgcmV0dXJuICcnO1xuICBcbiAgLy8g6rO167CxIOygnOqxsFxuICBsZXQgbm9ybWFsaXplZCA9IHVybC50cmltKCk7XG4gIFxuICAvLyBVUkwg7J247L2U65SpXG4gIHRyeSB7XG4gICAgbm9ybWFsaXplZCA9IGVuY29kZVVSSShub3JtYWxpemVkKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oJ1VSTCDsnbjsvZTrlKkg7Iuk7YyoOicsIGVycm9yKTtcbiAgfVxuICBcbiAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG59OyBcblxuLy8g7Jyg7Yqc67iMIHZpZGVvVXJs7JeQ7IScIOyNuOuEpOydvCBVUkzsnYQg7IOd7ISx7ZWY64qUIO2VqOyImFxuZXhwb3J0IGZ1bmN0aW9uIGdldFlvdXR1YmVUaHVtYm5haWxVcmwodmlkZW9Vcmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIC8vIOycoO2KnOu4jCBJRCDstpTstpwgKHlvdXR1LmJlLy4uLiwgeW91dHViZS5jb20vd2F0Y2g/dj0uLi4g65OxIOyngOybkClcbiAgbGV0IGlkID0gJyc7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTCh2aWRlb1VybCk7XG4gICAgaWYgKHVybC5ob3N0bmFtZSA9PT0gJ3lvdXR1LmJlJykge1xuICAgICAgaWQgPSB1cmwucGF0aG5hbWUucmVwbGFjZSgnLycsICcnKTtcbiAgICB9IGVsc2UgaWYgKHVybC5ob3N0bmFtZS5pbmNsdWRlcygneW91dHViZS5jb20nKSkge1xuICAgICAgaWQgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgndicpIHx8ICcnO1xuICAgIH1cbiAgfSBjYXRjaCB7XG4gICAgLy8gZmFsbGJhY2s6IOygleq3nOyLnVxuICAgIGNvbnN0IG1hdGNoID0gdmlkZW9VcmwubWF0Y2goLyg/OnlvdXR1XFwuYmVcXC98dj0pKFtcXHctXXsxMX0pLyk7XG4gICAgaWYgKG1hdGNoKSBpZCA9IG1hdGNoWzFdO1xuICB9XG4gIGlmICghaWQpIHJldHVybiAnJztcbiAgcmV0dXJuIGBodHRwczovL2ltZy55b3V0dWJlLmNvbS92aS8ke2lkfS9ocWRlZmF1bHQuanBnYDtcbn0gIl0sIm5hbWVzIjpbImdldFlvdVR1YmVFbWJlZFVybCIsInVybCIsInBhdHRlcm5zIiwicGF0dGVybiIsIm1hdGNoIiwiaXNWYWxpZFlvdVR1YmVVcmwiLCJ5b3V0dWJlUGF0dGVybnMiLCJzb21lIiwidGVzdCIsImdldFlvdVR1YmVWaWRlb0lkIiwiZ2V0WW91VHViZVRodW1ibmFpbCIsInZpZGVvSWQiLCJxdWFsaXR5Iiwibm9ybWFsaXplWW91VHViZVVybCIsIm5vcm1hbGl6ZWQiLCJ0cmltIiwiZW5jb2RlVVJJIiwiZXJyb3IiLCJjb25zb2xlIiwid2FybiIsImdldFlvdXR1YmVUaHVtYm5haWxVcmwiLCJ2aWRlb1VybCIsImlkIiwiVVJMIiwiaG9zdG5hbWUiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJpbmNsdWRlcyIsInNlYXJjaFBhcmFtcyIsImdldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/youtubeUtils.ts\n"));

/***/ })

});